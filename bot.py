import telebot
from telebot import types
from datetime import datetime
import uuid
import math

API_TOKEN = '8110459054:AAE-twMstc5mDLp7jeXSjtYJz6tX48Jaiik'  # –í–ê–® API –¢–û–ö–ï–ù
bot = telebot.TeleBot(API_TOKEN)
admin_ids = [1453081434,331697484]  # ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
orders = []  # –í—Å–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
all_sessions = {}  # –∫–ª—é—á - session_id, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å–µ—Å—Å–∏–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è
states = {
    'start': 0,
    'agreed': 1,
    'menu': 2,
    'city': 3,
    'area': 4,
    'podium': 5,
    'floor': 6,
    'wall_height': 7,
    'meeting_rooms': 8,
    'meeting_room1': 9,
    'meeting_room2': 10,
    'utility_room': 11,
    'utility_room_area': 12,
    'doors': 13,
    'overhead': 14,
    'light_logos': 15,
    'non_light_logos': 16,
    'reception_stands': 17,
    'podmaketniki': 18,
    'kashpo': 19,
    'plants': 20,
    'tv': 21,
    'tv_size': 22,
    'tv_size2': 23,
    'tv_size3': 24,
    'tv_size4': 25,
    'led_screens': 26,
    'led_size1': 27,
    'led_size2': 28,
    'event_name': 29,
    'furniture': 30,
    'furniture_tommy': 31,
    'furniture_gydra': 32,
    'furniture_eams': 33,
    'furniture_sofa': 34,
    'furniture_coffee_table': 35,
    'furniture_meeting_table': 36,
    'furniture_samba_chairs': 37,
    'furniture_fridge': 38,
    'furniture_fridge_size': 39,
    'furniture_cooler': 40,
    'furniture_coffee': 41,
    'furniture_shelves': 42,
    'finish': 100,
    'admin_panel': 200,
    'admin_orders': 201,
    'admin_clear': 202,
    'admin_stats': 203,
}

# –û–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤
reverse_states = {v: k for k, v in states.items()}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
question_display_names = {
    'start': '–ù–∞—á–∞–ª–æ',
    'agreed': '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö',
    'menu': '–ú–µ–Ω—é',
    'city': '–ì–æ—Ä–æ–¥',
    'area': '–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω–¥–∞',
    'podium': '–ü–æ–¥–∏—É–º',
    'floor': '–ù–∞–ø–æ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
    'wall_height': '–í—ã—Å–æ—Ç–∞ —Å—Ç–µ–Ω',
    'meeting_rooms': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç',
    'meeting_room1': '–ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π 1',
    'meeting_room2': '–ü–ª–æ—â–∞–¥—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π 2',
    'utility_room': '–ü–æ–¥—Å–æ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ',
    'utility_room_area': '–ü–ª–æ—â–∞–¥—å –ø–æ–¥—Å–æ–±–∫–∏',
    'doors': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π',
    'overhead': '–ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
    'light_logos': '–°–≤–µ—Ç–æ–≤—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤',
    'non_light_logos': '–ù–µ—Å–≤–µ—Ç–æ–≤—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤',
    'reception_stands': '–°—Ç–æ–µ–∫-—Ä–µ—Å–µ–ø—à–µ–Ω',
    'podmaketniki': '–¢—É–º–±-–ø–æ–¥–º–∞–∫–µ—Ç–Ω–∏–∫–æ–≤',
    'kashpo': '–ö–∞—à–ø–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏',
    'plants': '–¢–∏–ø —Ä–∞—Å—Ç–µ–Ω–∏–π',
    'tv': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢–í-–ø–ª–∞–∑–º',
    'tv_size': '–†–∞–∑–º–µ—Ä –¢–í 1',
    'tv_size2': '–†–∞–∑–º–µ—Ä –¢–í 2',
    'tv_size3': '–†–∞–∑–º–µ—Ä –¢–í 3',
    'tv_size4': '–†–∞–∑–º–µ—Ä –¢–í 4',
    'led_screens': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤',
    'led_size1': '–†–∞–∑–º–µ—Ä LED 1',
    'led_size2': '–†–∞–∑–º–µ—Ä LED 2',
    'event_name': '–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–∫–∏',
    'furniture': '–ú–µ–±–µ–ª—å',
    'furniture_tommy': '–ë–∞—Ä–Ω—ã–µ —Å—Ç—É–ª—å—è Tommy',
    'furniture_gydra': '–ö—Ä—É–≥–ª—ã–µ —Å—Ç–æ–ª—ã GYDRA',
    'furniture_eams': '–°—Ç—É–ª—å—è EAMS',
    'furniture_sofa': '–î–∏–≤–∞–Ω—ã',
    'furniture_coffee_table': '–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª—ã',
    'furniture_meeting_table': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ —Å—Ç–æ–ª—ã',
    'furniture_samba_chairs': '–ö—Ä–µ—Å–ª–∞ SAMBA',
    'furniture_fridge': '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
    'furniture_fridge_size': '–†–∞–∑–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞',
    'furniture_cooler': '–ö—É–ª–µ—Ä',
    'furniture_coffee': '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞',
    'furniture_shelves': '–°—Ç–µ–ª–ª–∞–∂–∏',
    'finish': '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞',
    'admin_panel': 'Backdoor',
    'admin_orders': '–ó–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞',
    'admin_clear': '–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏',
    'admin_stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
}

# –¶–µ–Ω—ã
prices = {
    'moscow': {
        'floor': {'carpet': {'with_podium': 1000, 'no_podium': 1500},
                  'laminate': {'with_podium': 2500, 'no_podium': 3000}},
        'wall': 9000,
        'overhead': {'small': 600000, 'big': 1200000},
        'tv': {'32': 10000, '50': 15000, '70': 35000, '85': 90000},
        'plants': {'live': 60000, 'fake': 45000},
        'light_logo': 45000,
        'non_light_logo': 15000,
        'podmaketnik': 50000,
        'door': 15000,
        'led_screen': 50000,
        'documentation': 2500,
        'accreditation': {'base': 1600, 'extra': 450, 'fix': 50000 + 15000},
        'electricity': {'base': 15000, 'perimeter': 3000},
        'transport': 80000,
        'mount': 0,
        'dismount': 0,
        'reception_stand': 100000,
        'podmaketnik_price': 50000,
        'podium_base_cost': 3000
    },
    'spb': {
        'floor': {'carpet': {'with_podium': 1000, 'no_podium': 1500},
                  'laminate': {'with_podium': 2500, 'no_podium': 3000}},
        'wall': 7500,
        'overhead': {'small': 500000, 'big': 1000000},
        'tv': {'32': 10000, '50': 15000, '70': 35000, '85': 90000},
        'plants': {'live': 60000, 'fake': 45000},
        'light_logo': 45000,
        'non_light_logo': 15000,
        'podmaketnik': 50000,
        'door': 15000,
        'led_screen': 50000,
        'documentation': 2500,
        'accreditation': {'base': 1600, 'extra': 450, 'fix': 50000 + 15000},
        'electricity': {'base': 15000, 'perimeter': 3000},
        'transport': 40000,
        'mount': 0,
        'dismount': 0,
        'reception_stand': 100000,
        'podmaketnik_price': 50000,
        'podium_base_cost': 2500
    },

}


# Inline-–∫–Ω–æ–ø–∫–∏
def create_inline_keyboard(options, include_back=True, include_skip=False, include_menu=True):
    markup = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(text=opt, callback_data=opt) for opt in options]
    for btn in buttons:
        markup.add(btn)
    if include_back:
        markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='back'))
    if include_skip:
        markup.add(types.InlineKeyboardButton(text='üö´ –ù–µ –Ω—É–∂–Ω–æ', callback_data='skip'))
    if include_menu:
        markup.add(types.InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
    return markup


# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
def reset_user_data(chat_id):
    if chat_id not in user_data:
        user_data[chat_id] = {
            'state': states['start'],
            'current_session': None,
            'sessions': [],
            'agreed': False,
            'answers': {},
            'last_state': None
        }
    else:
        if 'answers' not in user_data[chat_id]:
            user_data[chat_id]['answers'] = {}


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id

    if chat_id in user_data and user_data[chat_id].get('agreed', False):
        user_data[chat_id]['state'] = states['menu']
        ask_question(chat_id)
    else:
        reset_user_data(chat_id)

        bot.send_message(chat_id,
                         "–ë–æ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã—Å—Ç–∞–≤–æ—á–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤-–∞–Ω–∞–ª–æ–≥–æ–≤ 2025 –≥–æ–¥–∞. –°–º–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π, –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.")
        bot.send_message(chat_id,
                         "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è —Å–±–æ—Ä, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='‚úÖ –°–û–ì–õ–ê–®–ê–Æ–°–¨', callback_data='agree'))
        bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ:", reply_markup=markup)


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
def get_current_session(chat_id):
    if chat_id not in user_data:
        reset_user_data(chat_id)
    current_id = user_data[chat_id].get('current_session')
    for s in user_data[chat_id]['sessions']:
        if s['id'] == current_id:
            return s
    return None


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
def create_new_session(chat_id):
    if chat_id not in user_data:
        reset_user_data(chat_id)
    session_id = str(uuid.uuid4())
    new_session = {
        'id': session_id,
        'user_chat_id': chat_id,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'updated_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'answers': {},
        'finished': False,
        'submitted': False,
        'total': None
    }
    user_data[chat_id]['sessions'].append(new_session)
    user_data[chat_id]['current_session'] = session_id
    all_sessions[session_id] = new_session
    return new_session


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    data = call.data

    if chat_id not in user_data:
        reset_user_data(chat_id)

    current_state = user_data[chat_id]['state']
    user_data[chat_id]['last_state'] = current_state

    if data == 'agree':
        user_data[chat_id]['state'] = states['menu']
        user_data[chat_id]['agreed'] = True
        ask_question(chat_id)


    elif data == 'back':
        if current_state == states['plants']:
            user_data[chat_id]['state'] = states['kashpo']
        elif current_state == states['podmaketniki']:
            user_data[chat_id]['state'] = states['reception_stands']
        elif current_state == states['reception_stands']:
            user_data[chat_id]['state'] = states['light_logos']
        elif current_state > states['city']:
            user_data[chat_id]['state'] -= 1
        ask_question(chat_id)

    elif data == 'skip':
        current_state = user_data[chat_id]['state']
        user_data[chat_id]['answers'][current_state] = '–ù–µ –Ω—É–∂–Ω–æ'
        user_data[chat_id]['state'] += 1
        ask_question(chat_id)


    elif data == '–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–µ–Ω–¥–∞':
        create_new_session(chat_id)
        user_data[chat_id]['state'] = states['city']
        ask_question(chat_id)

    elif data == '–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å':  # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if chat_id in admin_ids:
            user_data[chat_id]['state'] = states['admin_panel']
            ask_question(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            user_data[chat_id]['state'] = states['menu']
            ask_question(chat_id)

    elif data == 'admin_panel':  # –≠–¢–ê –ù–û–í–ê–Ø –í–ï–¢–ö–ê –î–õ–Ø –ö–ù–û–ü–ö–ò "–ù–ê–ó–ê–î –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨"
        if chat_id in admin_ids:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üì¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"),
                types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
                types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            )
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.edit_message_text(
                "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

    elif data == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏':
        if chat_id in admin_ids:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üì¨ –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_orders"))
            markup.add(types.InlineKeyboardButton("üßÆ –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã", callback_data="admin_all_sessions"))
            markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_panel"))
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                reply_markup=markup
            )
        user_data[chat_id]['state'] = states['admin_panel']

    elif data == '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
        if chat_id in admin_ids:
            orders.clear()
            bot.answer_callback_query(call.id, "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –æ—á–∏—â–µ–Ω–∞.")
        user_data[chat_id]['state'] = states['admin_panel']

    elif data == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        if chat_id in admin_ids:
            total_orders = len(orders)
            unique_users = len(set(order.get('chat_id', '') for order in orders if isinstance(order, dict)))
            bot.answer_callback_query(call.id,
                                      f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {total_orders}\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        user_data[chat_id]['state'] = states['admin_panel']

    elif data == 'admin_orders':
        handle_admin_orders_list(call)

    elif data == 'admin_all_sessions':
        handle_admin_all_sessions(call)

    elif data.startswith('admin_view_order_'):
        handle_admin_view_order(call)

    elif data.startswith('admin_view_session_'):
        handle_admin_view_session(call)

    elif data == '‚¨Ö –í –º–µ–Ω—é':
        user_data[chat_id]['state'] = states['menu']
        ask_question(chat_id)

    elif data == 'submit':
        session = get_current_session(chat_id)
        if not session:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        order_data = {
            'chat_id': chat_id,
            'user_name': call.from_user.username or call.from_user.first_name,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total': session.get('total', 0),
            'answers': session['answers'].copy(),
            'event_name': session['answers'].get(states['event_name'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        }

        orders.append(order_data)
        session['submitted'] = True
        session['submitted_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

        for admin_id in admin_ids:
            try:
                admin_msg = f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{len(orders)}\n"
                admin_msg += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order_data['user_name']}\n"
                admin_msg += f"üìÖ –î–∞—Ç–∞: {order_data['timestamp']}\n"
                admin_msg += f"üè∑ –í—ã—Å—Ç–∞–≤–∫–∞: {order_data['event_name']}\n"
                admin_msg += f"üí∞ –°—É–º–º–∞: {order_data['total']:,.0f} —Ä—É–±.\n"
                bot.send_message(admin_id, admin_msg)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        user_data[chat_id]['state'] = states['menu']
        ask_question(chat_id)


    elif data == 'cancel':
        bot.send_message(chat_id, "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏.")
        user_data[chat_id]['state'] = states['menu']
        ask_question(chat_id)

    elif data == 'back_to_menu':
        user_data[chat_id]['state'] = states['menu']
        ask_question(chat_id)

    else:
        if current_state in [states['light_logos'], states['non_light_logos'],
                             states['reception_stands'], states['podmaketniki'],
                             states['kashpo'], states['tv'], states['led_screens'],
                             states['furniture_tommy'], states['furniture_gydra'],
                             states['furniture_eams'], states['furniture_sofa'],
                             states['furniture_coffee_table'], states['furniture_meeting_table'],
                             states['furniture_samba_chairs'], states['furniture_shelves']]:
            try:
                parsed_data = int(data)
                user_data[chat_id]['answers'][current_state] = parsed_data
            except ValueError:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
                return
        else:
            user_data[chat_id]['answers'][current_state] = data

        session = get_current_session(chat_id)
        if session:
            session['answers'][current_state] = user_data[chat_id]['answers'][current_state]
            session['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M")

        user_data[chat_id]['last_state'] = current_state

        if current_state == states['furniture_shelves']:
            user_data[chat_id]['state'] = states['finish']
        else:
            user_data[chat_id]['state'] += 1

        ask_question(chat_id)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_data:
        reset_user_data(chat_id)
        send_welcome(message)
        return

    state = user_data[chat_id]['state']

    if 'answers' not in user_data[chat_id]:
        user_data[chat_id]['answers'] = {}

    try:
        if state in [states['area'], states['meeting_room1'], states['meeting_room2'],
                     states['utility_room_area'], states['doors']]:
            text = float(text.replace(',', '.'))
        elif state == states['event_name']:
            pass
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
            return

    except ValueError:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    user_data[chat_id]['answers'][state] = text

    session = get_current_session(chat_id)
    if session:
        session['answers'][state] = text
        session['updated_at'] = datetime.now().strftime("%Y-%m-%d %H:%M")

    user_data[chat_id]['last_state'] = state

    next_state_map = {
        states['area']: states['podium'],
        states['meeting_room1']: states['meeting_room2'],
        states['meeting_room2']: states['utility_room'],
        states['utility_room_area']: states['doors'],
        states['doors']: states['overhead'],
        states['event_name']: states['furniture'],
    }

    if state in next_state_map:
        user_data[chat_id]['state'] = next_state_map[state]
    else:
        user_data[chat_id]['state'] += 1

    ask_question(chat_id)


def ask_question(chat_id):
    state = user_data[chat_id]['state']
    answers = user_data[chat_id].get('answers', {})

    if chat_id not in user_data:
        reset_user_data(chat_id)

    elif state == states['menu']:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–°–î–ï–õ–ê–¢–¨ –ù–û–í–´–ô –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò –°–¢–ï–ù–î–ê', callback_data='–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–µ–Ω–¥–∞'))
        if chat_id in admin_ids:
            markup.add(types.InlineKeyboardButton('üîê –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å', callback_data='–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å'))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


    elif state == states['city']:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—ã—Å—Ç–∞–≤–∫–∏:",
                         reply_markup=create_inline_keyboard(['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'], include_menu=True,
                                                             include_back=False))

    elif state == states['area']:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω–¥–∞ –≤ –º¬≤:")

    elif state == states['podium']:
        bot.send_message(chat_id, "–ù—É–∂–µ–Ω –ª–∏ –ø–æ–¥–∏—É–º?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))

    elif state == states['floor']:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è:",
                         reply_markup=create_inline_keyboard(['–ö–æ–≤—Ä–æ–ª–∏–Ω', '–õ–∞–º–∏–Ω–∞—Ç (–õ–î–°–ü)']))

    elif state == states['wall_height']:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Å–æ—Ç—É —Å—Ç–µ–Ω:",
                         reply_markup=create_inline_keyboard(['3-4–º', '4-5–º', '5-6–º']))

    elif state == states['meeting_rooms']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç?", reply_markup=create_inline_keyboard(['0', '1', '2']))

    elif state == states['meeting_room1']:
        meeting_rooms_ans = answers.get(states['meeting_rooms'])
        if meeting_rooms_ans is None or int(meeting_rooms_ans) <= 0:
            user_data[chat_id]['state'] = states['utility_room']  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 2 –∫–æ–º–Ω–∞—Ç—ã
            return ask_question(chat_id)
        bot.send_message(chat_id, "–ü–ª–æ—â–∞–¥—å –ø–µ—Ä–≤–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ –º¬≤:")

    elif state == states['meeting_room2']:
        meeting_rooms_ans = answers.get(states['meeting_rooms'])
        if meeting_rooms_ans is None or int(meeting_rooms_ans) <= 1:
            user_data[chat_id]['state'] = states['utility_room']  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä—É—é
            return ask_question(chat_id)
        bot.send_message(chat_id, "–ü–ª–æ—â–∞–¥—å –≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –≤ –º¬≤:")

    elif state == states['utility_room']:
        bot.send_message(chat_id, "–ù—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Å–æ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))

    elif state == states['utility_room_area']:
        utility_room = answers.get(states['utility_room'], '–ù–µ—Ç')
        if utility_room == '–ù–µ—Ç':
            user_data[chat_id]['state'] = states['doors']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–ü–ª–æ—â–∞–¥—å –ø–æ–¥—Å–æ–±–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è –≤ –º¬≤:")

    elif state == states['doors']:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π –Ω–∞ —Å—Ç–µ–Ω–¥–µ (0 - 100):")

    elif state == states['overhead']:
        bot.send_message(chat_id, "–ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∞–¥ —Å—Ç–µ–Ω–¥–æ–º:", reply_markup=create_inline_keyboard(
            ['–ù–µ—Ç', '–ú–∞–ª—ã–π –ø–æ–¥–≤–µ—Å (–¥–æ 4 –º¬≤)', '–ë–æ–ª—å—à–æ–π –ø–æ–¥–≤–µ—Å (–æ—Ç 4,5 –º¬≤)']))

    elif state == states['light_logos']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Å–≤–µ—Ç–æ–≤—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –ª–∞–π—Ç–±–æ–∫—Å–æ–≤ –∏ —Å–≤–µ—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 8)]))

    elif state == states['non_light_logos']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –Ω–µ—Å–≤–µ—Ç–æ–≤—ã—Ö –æ–±—ä–µ–º–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 8)]))

    elif state == states['reception_stands']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–µ–∫-—Ä–µ—Å–µ–ø—à–µ–Ω —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
                         reply_markup=create_inline_keyboard([str(i) for i in [0, 1, 2, 3, 4, 6, 8, 10]]))

    elif state == states['podmaketniki']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Ç—É–º–±-–ø–æ–¥–º–∞–∫–µ—Ç–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
                         reply_markup=create_inline_keyboard([str(i) for i in [0, 1, 2, 3, 4, 6, 8, 10]]))

    elif state == states['kashpo']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∫–∞—à–ø–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ —Ç—Ä—É–±–µ—Ç—Å—è?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 11)]))


    elif state == states['plants']:
        kashpo_count = int(answers.get(states['kashpo'], 0))
        if kashpo_count > 0:
            bot.send_message(chat_id, "–ö–∞–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω—É–∂–Ω—ã?",
                             reply_markup=create_inline_keyboard(
                                 ['–ñ–∏–≤—ã–µ –∫–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è', '–ù–µ –Ω—É–∂–Ω—ã']))
        else:
            user_data[chat_id]['answers'][states['plants']] = '–ù–µ –Ω—É–∂–Ω—ã'
            user_data[chat_id]['state'] = states['tv']
            ask_question(chat_id)

    elif state == states['tv']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¢–í-–ø–ª–∞–∑–º?", reply_markup=create_inline_keyboard(['0', '1', '2', '3', '4']))

    elif state == states['tv_size']:
        tv_count = int(answers.get(states['tv'], 0))
        if tv_count <= 0:
            user_data[chat_id]['state'] = states['led_screens']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä –¢–í-–ø–ª–∞–∑–º—ã:",
                         reply_markup=create_inline_keyboard(["32", "50", "70", "85"]))

    elif state == states['tv_size2']:
        tv_count = int(answers.get(states['tv'], 0))
        if tv_count <= 1:
            user_data[chat_id]['state'] = states['led_screens']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä –≤—Ç–æ—Ä–æ–π –¢–í-–ø–ª–∞–∑–º—ã:",
                         reply_markup=create_inline_keyboard(["32", "50", "70", "85"]))

    elif state == states['tv_size3']:
        tv_count = int(answers.get(states['tv'], 0))
        if tv_count <= 2:
            user_data[chat_id]['state'] = states['led_screens']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä —Ç—Ä–µ—Ç—å–µ–π –¢–í-–ø–ª–∞–∑–º—ã:",
                         reply_markup=create_inline_keyboard(["32", "50", "70", "85"]))

    elif state == states['tv_size4']:
        tv_count = int(answers.get(states['tv'], 0))
        if tv_count <= 3:
            user_data[chat_id]['state'] = states['led_screens']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä —á–µ—Ç–≤—ë—Ä—Ç–æ–π –¢–í-–ø–ª–∞–∑–º—ã:",
                         reply_markup=create_inline_keyboard(["32", "50", "70", "85"]))

    elif state == states['led_screens']:
        bot.send_message(chat_id,  "–°–∫–æ–ª—å–∫–æ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ—ç–∫—Ä–∞–Ω–æ–≤?", reply_markup=create_inline_keyboard(['0', '1', '2']))


    elif state == states['led_size1']:
        led_count = int(answers.get(states['led_screens'], 0))
        if led_count <= 0:
            user_data[chat_id]['state'] = states['event_name']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ—ç–∫—Ä–∞–Ω–∞:",
                         reply_markup=create_inline_keyboard(
                             ["1x2", "1.5x2", "1.5x2.5", "1.5x3", "2x2", "2x3", "3x3", "3x4", "4x4"]))


    elif state == states['led_size2']:
        led_count = int(answers.get(states['led_screens'], 0))
        if led_count <= 1:
            user_data[chat_id]['state'] = states['event_name']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ—ç–∫—Ä–∞–Ω–∞:",
                         reply_markup=create_inline_keyboard(
                             ["1x2", "1.5x2", "1.5x2.5", "1.5x3", "2x2", "2x3", "3x3", "3x4", "4x4"]))

    elif state == states['event_name']:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–∫–∏:")


    elif state == states['furniture']:
        bot.send_message(chat_id, "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ–±–µ–ª—å –Ω–∞ —Å—Ç–µ–Ω–¥–µ?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))


    elif state == states['furniture_tommy']:
        furniture_choice = answers.get(states['furniture'], '–ù–µ—Ç')
        if furniture_choice == '–ù–µ—Ç':
            user_data[chat_id]['state'] = states['finish']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –±–∞—Ä–Ω—ã—Ö —Å—Ç—É–ª—å–µ–≤ —Ç–∏–ø–∞ Tommy?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 11)]))

    elif state == states['furniture_gydra']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∫—Ä—É–≥–ª—ã—Ö —Å—Ç–æ–ª–æ–≤ —Ç–∏–ø–∞ GYDRA?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 7)]))

    elif state == states['furniture_eams']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç—É–ª—å–µ–≤ —Ç–∏–ø–∞ EAMS?",
                         reply_markup=create_inline_keyboard(['0', '1', '2', '4', '8', '12', '16', '20', '24']))

    elif state == states['furniture_sofa']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –¥–∏–≤–∞–Ω–æ–≤?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 5)]))

    elif state == states['furniture_coffee_table']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 5)]))

    elif state == states['furniture_meeting_table']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 5)]))

    elif state == states['furniture_samba_chairs']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫—Ä–µ—Å–µ–ª —Ç–∏–ø–∞ SAMBA?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 17, 2)]))

    elif state == states['furniture_fridge']:
        bot.send_message(chat_id, "–ù—É–∂–µ–Ω –ª–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))

    elif state == states['furniture_fridge_size']:
        fridge_choice = answers.get(states['furniture_fridge'], '–ù–µ—Ç')
        if fridge_choice == '–ù–µ—Ç':
            user_data[chat_id]['state'] = states['furniture_cooler']
            return ask_question(chat_id)
        bot.send_message(chat_id, "–†–∞–∑–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞:", reply_markup=create_inline_keyboard(['–ë–æ–ª—å—à–æ–π', '–°—Ä–µ–¥–Ω–∏–π']))

    elif state == states['furniture_cooler']:
        bot.send_message(chat_id, "–ù—É–∂–µ–Ω –ª–∏ –∫—É–ª–µ—Ä?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))

    elif state == states['furniture_coffee']:
        bot.send_message(chat_id, "–ù—É–∂–Ω–∞ –ª–∏ –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞?", reply_markup=create_inline_keyboard(['–î–∞', '–ù–µ—Ç']))

    elif state == states['furniture_shelves']:
        bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ —Å—Ç–µ–ª–ª–∞–∂–µ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è?",
                         reply_markup=create_inline_keyboard([str(i) for i in range(0, 6)]))

    elif state == states['admin_panel']:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("üì¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"),
            types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
            types.InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        )
        bot.send_message(chat_id, "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", parse_mode='HTML', reply_markup=markup)

    elif state == states['finish']:
        calculate_cost(chat_id)


# –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_cost(chat_id):
    answers = user_data[chat_id].get('answers', {})
    city_raw = answers.get(states['city'], '–ú–æ—Å–∫–≤–∞').lower()

    if city_raw == '–º–æ—Å–∫–≤–∞':
        city = 'moscow'
    elif city_raw == '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥':
        city = 'spb'
    else:
        city = 'moscow'  # Fallback

    area = float(answers.get(states['area'], 0))
    podium = answers.get(states['podium'], '–ù–µ—Ç')
    floor_type = answers.get(states['floor'], '–ö–æ–≤—Ä–æ–ª–∏–Ω')
    wall_height = answers.get(states['wall_height'], '3-4–º')
    doors = int(answers.get(states['doors'], 0))
    overhead = answers.get(states['overhead'], '–ù–µ—Ç')
    light_logos = int(answers.get(states['light_logos'], 0))
    non_light_logos = int(answers.get(states['non_light_logos'], 0))
    reception_stands = int(answers.get(states['reception_stands'], 0))
    podmaketniki = int(answers.get(states['podmaketniki'], 0))
    kashpo = int(answers.get(states['kashpo'], 0))
    plants = answers.get(states['plants'], '–ù–µ –Ω—É–∂–Ω—ã')
    tv_count = int(answers.get(states['tv'], 0))
    led_screens = int(answers.get(states['led_screens'], 0))
    furniture_choice = answers.get(states['furniture'], '–ù–µ—Ç')

    meeting_room1_area = float(answers.get(states['meeting_room1'], 0)) if int(
        answers.get(states['meeting_rooms'], 0)) >= 1 else 0
    meeting_room2_area = float(answers.get(states['meeting_room2'], 0)) if int(
        answers.get(states['meeting_rooms'], 0)) >= 2 else 0
    utility_room_area_val = float(answers.get(states['utility_room_area'], 0)) if answers.get(states['utility_room'],
                                                                                              '–ù–µ—Ç') == '–î–∞' else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º wall_area_for_formulas: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
    meeting_rooms_count = int(answers.get(states['meeting_rooms'], 0))

    def get_average_wall_height(wall_height_str):
        try:
            clean = wall_height_str.replace('–º', '').strip()
            parts = clean.split('-')
            if len(parts) == 2:
                h1, h2 = float(parts[0]), float(parts[1])
                return (h1 + h2) / 2
            else:
                return float(parts[0])
        except:
            return 3.5

    if meeting_rooms_count == 0:
        # –ù–µ—Ç –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ø–ª–æ—â–∞–¥–∏ —Å—Ç–µ–Ω–¥–∞
        base_area = area / 2
        side_length = base_area ** 0.5
        perimeter = 4 * side_length
        avg_wall_height = get_average_wall_height(wall_height)
        wall_area_for_formulas = perimeter * avg_wall_height
    else:
        # –ï—Å—Ç—å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∏ –ø–æ–¥—Å–æ–±–∫—É
        base_area = meeting_room1_area + meeting_room2_area + utility_room_area_val
        side_length = base_area ** 0.5
        perimeter = 4 * side_length
        avg_wall_height = get_average_wall_height(wall_height)
        wall_area_for_formulas = perimeter * avg_wall_height

    cost = {
        '1. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': 0,
        '2. –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è': 0,
        '3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
            '3.1 –ü–æ–ª': 0,
            '3.2 –°—Ç–µ–Ω—ã': 0,
            '3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è': 0,
            '3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏': 0,
            '3.5 –ú–µ–±–µ–ª—å': 0,
            '3.6 –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞': 0,
            '3.7 –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ': 0,
            '3.8 –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ': 0
        },
        '4. –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –¥–µ–º–æ–Ω—Ç–∞–∂': 0
    }

    cost['1. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'] = area * prices[city]['documentation']


    cost['2. –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è'] = (
            1600 * area +
            wall_area_for_formulas * 450 * 2 +
            450 * area +
            50000 +
            15000
    )

    if podium == '–î–∞':
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.1 –ü–æ–ª'] += area * prices[city]['podium_base_cost']
    else:
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.1 –ü–æ–ª'] += area * 500

    if floor_type == '–ö–æ–≤—Ä–æ–ª–∏–Ω':
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.1 –ü–æ–ª'] += area * 1000
    else:
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.1 –ü–æ–ª'] += area * 2500

    wall_price = prices[city]['wall']
    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.2 –°—Ç–µ–Ω—ã'] = wall_price * wall_area_for_formulas + doors * 15000

    if overhead == '–ú–∞–ª—ã–π –ø–æ–¥–≤–µ—Å (–¥–æ 4 –º¬≤)':
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'] = prices[city]['overhead'][
            'small']
    elif overhead == '–ë–æ–ª—å—à–æ–π –ø–æ–¥–≤–µ—Å (–æ—Ç 4 –º¬≤)':
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'] = prices[city]['overhead'][
            'big']

    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] = reception_stands * \
                                                                                                prices[city][
                                                                                                    'reception_stand']
    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] += podmaketniki * \
                                                                                                 prices[city][
                                                                                                     'podmaketnik_price']

    if plants != '–ù–µ –Ω—É–∂–Ω—ã' and kashpo > 0:
        plant_price = prices[city]['plants']['live'] if plants == '–ñ–∏–≤—ã–µ –∫–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è' else \
        prices[city]['plants']['fake']
        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'][
            '3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏'] += kashpo * plant_price

    if furniture_choice == '–î–∞':
        def safe_int(val):
            try:
                return int(val)
            except (ValueError, TypeError):
                return 0

        furniture_cost = {
            'tommy': safe_int(answers.get(states['furniture_tommy'])) * 2500,
            'gydra': safe_int(answers.get(states['furniture_gydra'])) * 4000,
            'eams': safe_int(answers.get(states['furniture_eams'])) * 1500,
            'sofa': safe_int(answers.get(states['furniture_sofa'])) * 9000,
            'coffee_table': safe_int(answers.get(states['furniture_coffee_table'])) * 4000,
            'meeting_table': safe_int(answers.get(states['furniture_meeting_table'])) * 20000,
            'samba_chairs': safe_int(answers.get(states['furniture_samba_chairs'])) * 3500,
            'shelves': safe_int(answers.get(states['furniture_shelves'])) * 2000,
        }

        fridge_choice = answers.get(states['furniture_fridge'], '–ù–µ—Ç')
        fridge_size = answers.get(states['furniture_fridge_size'], '')
        if fridge_choice == '–î–∞':
            if fridge_size == '–ë–æ–ª—å—à–æ–π':
                furniture_cost['fridge'] = 12000
            elif fridge_size == '–°—Ä–µ–¥–Ω–∏–π':
                furniture_cost['fridge'] = 9000

        if answers.get(states['furniture_cooler'], '–ù–µ—Ç') == '–î–∞':
            furniture_cost['cooler'] = 7000
        if answers.get(states['furniture_coffee'], '–ù–µ—Ç') == '–î–∞':
            furniture_cost['coffee'] = 20000

        cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.5 –ú–µ–±–µ–ª—å'] = sum(furniture_cost.values()) + 20000

    led_cost = 0
    if led_screens >= 1:
        size1 = answers.get(states['led_size1'], '1x2')
        try:
            w, h = map(float, size1.lower().replace('—Ö', 'x').split('x'))
            led_cost += prices[city]['led_screen'] * (w * h)
        except (ValueError, AttributeError):
            pass

    if led_screens >= 2:
        size2 = answers.get(states['led_size2'], '1x2')
        try:
            w, h = map(float, size2.lower().replace('—Ö', 'x').split('x'))
            led_cost += prices[city]['led_screen'] * (w * h)
        except (ValueError, AttributeError):
            pass

    tv_costs = 0
    tv_sizes = [
        answers.get(states['tv_size']),
        answers.get(states['tv_size2']),
        answers.get(states['tv_size3']),
        answers.get(states['tv_size4'])
    ]
    for i in range(tv_count):
        size_key = str(tv_sizes[i]).replace("'", "")
        if size_key in prices[city]['tv']:
            tv_costs += prices[city]['tv'][size_key]

    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.6 –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞'] = led_cost + tv_costs

    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.7 –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ'] = prices[city]['electricity'][
                                                                                               'base'] + perimeter * \
                                                                                           prices[city]['electricity'][
                                                                                               'perimeter']

    cost['3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ']['3.8 –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ'] = (
            light_logos * prices[city]['light_logo'] +
            non_light_logos * prices[city]['non_light_logo']
    )

    mount_cost = (3000 * area + 4500 * wall_area_for_formulas)
    transport_cost = prices[city]['transport']
    cost['4. –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –¥–µ–º–æ–Ω—Ç–∞–∂'] = mount_cost + transport_cost

    # --- –ù–û–í–´–ô –§–û–†–ú–ê–¢ –í–´–í–û–î–ê –°–ú–ï–¢–´ ---
    result = "üßÆ <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø —Å–º–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–µ–Ω–¥–∞:</b>\n"

    # 1. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    doc_value = cost.get('1. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 0)
    result += f"\n1. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏–µ —á–µ—Ä—Ç–µ–∂–∏, —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–µ–∫—Ç, —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–æ–∫, –º–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä.): {doc_value:,.0f} —Ä—É–±.\n"

    # 2. –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è
    accr_value = cost.get('2. –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è', 0)
    result += f"\n2. –ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è (—Ä–∞—Å—Ö–æ–¥—ã –û–¢–ö, –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è): {accr_value:,.0f} —Ä—É–±.\n"

    # 3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    equip_cost = cost.get('3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', {})
    if equip_cost:
        result += f"\n3. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∏ –ø—Ä–æ–∫–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        equip_total = 0

        # 3.1 –ü–æ–ª
        val = equip_cost.get('3.1 –ü–æ–ª', 0)
        if val > 0:
            result += f"\n  3.1 –ü–æ–ª (–≤ —Å–ª—É—á–∞–µ –Ω–∞–ª–∏—á–∏—è - –ø–æ–¥–∏—É–º, –Ω–∞–ø–æ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.2 –°—Ç–µ–Ω—ã
        val = equip_cost.get('3.2 –°—Ç–µ–Ω—ã', 0)
        if val > 0:
            result += f"\n  3.2 –°—Ç–µ–Ω—ã (—Å—Ç–µ–Ω–æ–≤—ã–µ –∫–æ—Ä–æ–±–∞, –æ–±–ª–∏—Ü–æ–≤–∫–∞ —Å—Ç–µ–Ω): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        val = equip_cost.get('3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 0)
        if val > 0:
            result += f"\n  3.3 –ü–æ–¥–≤–µ—Å–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—Ç–æ—á–∫–∏ –ø–æ–¥–≤–µ—Å–∞, –ª–µ–±–µ–¥–∫–∏, —Ñ–µ—Ä–º—ã, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        val = equip_cost.get('3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', 0)
        if val > 0:
            result += f"\n  3.4 –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Å—Ç–æ–π–∫–∏ —Ä–µ—Å–µ–ø—à–µ–Ω, –∫–∞—à–ø–æ —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏, —Ç—É–º–±—ã-–ø–æ–¥–º–∞–∫–µ—Ç–Ω–∏–∫–∏ –∏ –ø—Ä.): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.5 –ú–µ–±–µ–ª—å
        val = equip_cost.get('3.5 –ú–µ–±–µ–ª—å', 0)
        if val > 0:
            result += f"\n  3.5 –ú–µ–±–µ–ª—å (–ø—Ä–æ–∫–∞—Ç): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.6 –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞
        val = equip_cost.get('3.6 –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞', 0)
        if val > 0:
            result += f"\n  3.6 –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ (–ø—Ä–æ–∫–∞—Ç): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.7 –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        val = equip_cost.get('3.7 –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ', 0)
        if val > 0:
            result += f"\n  3.7 –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∏ –æ—Å–≤–µ—â–µ–Ω–∏–µ (–ø—Ä–æ–∫–∞—Ç): {val:,.0f} —Ä—É–±."
            equip_total += val

        # 3.8 –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        val = equip_cost.get('3.8 –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ', 0)
        if val > 0:
            result += f"\n  3.8 –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {val:,.0f} —Ä—É–±."
            equip_total += val

        if equip_total > 0:
            result += f"\n  –ò—Ç–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {equip_total:,.0f} —Ä—É–±."

    # 4. –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –¥–µ–º–æ–Ω—Ç–∞–∂
    mount_value = cost.get('4. –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –¥–µ–º–æ–Ω—Ç–∞–∂', 0)
    result += f"\n\n4. –ú–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –¥–µ–º–æ–Ω—Ç–∞–∂: {mount_value:,.0f} —Ä—É–±.\n"

    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    final_grand_total = math.ceil(mount_value + doc_value + accr_value + equip_total)
    result += f"\n\nüí∞ <b>–û–ë–©–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {final_grand_total:,.0f} —Ä—É–±.</b>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id, result, parse_mode='HTML')

    session = get_current_session(chat_id)
    if session:
        session['finished'] = True
        session['total'] = final_grand_total

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data='submit'))
    markup.add(types.InlineKeyboardButton(text='–ù–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å', callback_data='cancel'))
    markup.add(types.InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
    bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=markup)


def handle_admin_orders_list(call):
    chat_id = call.message.chat.id
    if chat_id not in admin_ids:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        markup = types.InlineKeyboardMarkup()
        if not orders:
            markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel'))
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫.",
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
            return

        for idx, order in enumerate(orders):
            user_name = order.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            event_name = order.get('event_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:20]
            total = order.get('total', 0)
            button_text = f"üìå –ó–∞—è–≤–∫–∞ #{idx + 1} | @{user_name} | {event_name} | {total:,.0f} —Ä—É–±."
            markup.add(types.InlineKeyboardButton(text=button_text, callback_data=f"admin_view_order_{idx}"))

        markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel'))

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="üì¨ <b>–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>",
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_orders_list: {e}")


def handle_admin_view_order(call):
    chat_id = call.message.chat.id
    if chat_id not in admin_ids:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        order_idx = int(call.data.split('_')[-1])
        order = orders[order_idx]

        answers = order.get('answers', {})

        details = f"üîç <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ #{order_idx + 1}</b>\n"
        details += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order['user_name']}\n"
        details += f"üÜî ID —á–∞—Ç–∞: {order['chat_id']}\n"
        details += f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {order['timestamp']}\n"
        details += f"üè∑ –í—ã—Å—Ç–∞–≤–∫–∞: {order['event_name']}\n"
        details += f"üí∞ –û–ë–©–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {order['total']:,} —Ä—É–±.\n\n"

        details += "üì¶ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
        for state_key in sorted(answers.keys()):
            question_name_en = reverse_states.get(state_key, f"–í–æ–ø—Ä–æ—Å {state_key}")
            display_question_name = question_display_names.get(question_name_en,
                                                               question_name_en.replace('_', ' ').capitalize())
            answer_value = answers[state_key]

            if isinstance(answer_value, (int, float)):
                formatted_answer = f"{answer_value:,.0f}"
            else:
                formatted_answer = str(answer_value)

            details += f"üîπ {display_question_name}: {formatted_answer}\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫', callback_data='admin_orders'))

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text=details,
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except (IndexError, ValueError) as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–æ–º: {e}")


def get_question_text(state):
    questions = {
        states['city']: "–ì–æ—Ä–æ–¥",
        states['area']: "–ü–ª–æ—â–∞–¥—å —Å—Ç–µ–Ω–¥–∞",
        states['podium']: "–ü–æ–¥–∏—É–º",
    }
    return questions.get(state, f"–í–æ–ø—Ä–æ—Å {state}")


def handle_admin_all_sessions(call):
    chat_id = call.message.chat.id
    if chat_id not in admin_ids:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        markup = types.InlineKeyboardMarkup()
        if not all_sessions:
            markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏'))
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=call.message.message_id,
                text="üì≠ –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.",
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
            return

        for session in all_sessions.values():
            status = "üü¢" if session['finished'] else "üü°"
            submitted = " ‚úÖ" if session.get('submitted', False) else ""
            total = f" üí∞ {session.get('total', '‚Äî'):,} —Ä—É–±." if session.get('total') else ""
            city = session['answers'].get(states['city'], '‚Äî')
            area = session['answers'].get(states['area'], '‚Äî')

            user_info = bot.get_chat(session['user_chat_id'])
            user_name = user_info.username or user_info.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            user_display = f'@{user_name}' if user_info.username else user_name

            button_text = f"{status} {user_display} | {city}, {area}–º¬≤{total}{submitted}"

            markup.add(
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"admin_view_session_{session['id']}"
                )
            )
        markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_panel'))
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=call.message.message_id,
            text="üßÆ <b>–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã:</b>",
            parse_mode='HTML',
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_all_sessions: {e}")


def handle_admin_view_session(call):
    chat_id = call.message.chat.id
    if chat_id not in admin_ids:
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        session_id = call.data[len('admin_view_session_'):]
        session = all_sessions.get(session_id)

        if not session:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –†–∞—Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        details = f"üîç <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞ #{session_id[:8]}</b>\n"

        user_info = bot.get_chat(session['user_chat_id'])
        user_name = user_info.username or user_info.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        user_display = f'@{user_name}' if user_info.username else user_name

        details += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
        details += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {session['user_chat_id']}\n"
        city = session['answers'].get(states['city'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        area = session['answers'].get(states['area'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        event_name = session['answers'].get(states['event_name'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        total = session.get('total', '–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω')
        created_at = session.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        submitted_at = session.get('submitted_at', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

        details += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        if session.get('submitted'):
            details += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {submitted_at}\n"
        details += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        details += f"üìê –ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n"
        details += f"üè∑ –í—ã—Å—Ç–∞–≤–∫–∞: {event_name}\n"
        if total is not None and isinstance(total, (int, float)):
            details += f"üí∞ –û–ë–©–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total:,.0f} —Ä—É–±.\n"
        else:
            details += "üí∞ –û–ë–©–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: –†–∞—Å—á—ë—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω\n"

        details += "üì¶ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
        answers = session['answers']
        for state_key in sorted(answers.keys()):
            question_name_en = reverse_states.get(state_key, f"–í–æ–ø—Ä–æ—Å {state_key}")
            display_question_name = question_display_names.get(question_name_en,
                                                               question_name_en.replace('_', ' ').capitalize())
            answer_value = answers[state_key]

            if isinstance(answer_value, (int, float)):
                formatted_answer = f"{answer_value:,.0f}"
            else:
                formatted_answer = str(answer_value)

            details += f"üîπ {display_question_name}: {formatted_answer}\n"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—á—ë—Ç–æ–≤', callback_data='admin_all_sessions'))
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=details, parse_mode='HTML',
                              reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—á—ë—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_admin_view_session: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('view_session_'))
def handle_view_user_session(call):
    chat_id = call.message.chat.id
    try:
        session_id = call.data[len('view_session_'):]
        session = None
        for s in user_data.get(chat_id, {}).get('sessions', []):
            if s['id'] == session_id:
                session = s
                break

        if not session:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –†–∞—Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        details = f"üîç <b>–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á—ë—Ç–∞ #{session_id[:8]}</b>\n"
        city = session['answers'].get(states['city'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        area = session['answers'].get(states['area'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        event_name = session['answers'].get(states['event_name'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        created_at = session.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        submitted_at = session.get('submitted_at', '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

        details += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
        if session.get('submitted'):
            details += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {submitted_at}\n"
        details += f"üìç –ì–æ—Ä–æ–¥: {city}\n"
        details += f"üìê –ü–ª–æ—â–∞–¥—å: {area} –º¬≤\n"
        details += f"üè∑ –í—ã—Å—Ç–∞–≤–∫–∞: {event_name}\n"

        if session.get('finished') and session.get('total') is not None:
            total = session.get('total', 0)
            details += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:,.0f} —Ä—É–±.\n"

            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã'))
            if not session.get('submitted', False):
                markup.add(
                    types.InlineKeyboardButton(text='üì§ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=f'submit_session_{session_id}'))
            markup.add(types.InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=details, parse_mode='HTML',
                                  reply_markup=markup)
        else:
            details += "üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –†–∞—Å—á—ë—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω\n"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data='–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã'))
            markup.add(types.InlineKeyboardButton(text='üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_to_menu'))
            bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id, text=details, parse_mode='HTML',
                                  reply_markup=markup)

        bot.answer_callback_query(call.id)
    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—á—ë—Ç–∞.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_view_user_session: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith('submit_session_'))
def handle_submit_from_history(call):
    chat_id = call.message.chat.id
    try:
        session_id = call.data[len('submit_session_'):]
        session = None
        for s in user_data.get(chat_id, {}).get('sessions', []):
            if s['id'] == session_id:
                session = s
                break
        if not session:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –†–∞—Å—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if session.get('submitted', False):
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
            return
        if not session.get('finished', False) or session.get('total') is None:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –†–∞—Å—á—ë—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            return

        order_data = {
            'chat_id': chat_id,
            'user_name': call.from_user.username or call.from_user.first_name,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'total': session.get('total', 0),
            'answers': session['answers'].copy(),
            'event_name': session['answers'].get(states['event_name'], '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'session_id': session_id
        }
        orders.append(order_data)
        session['submitted'] = True
        session['submitted_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        admin_msg = f"üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏\n"
        admin_msg += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order_data['user_name']}\n"
        admin_msg += f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {order_data['timestamp']}\n"
        admin_msg += f"üè∑ –í—ã—Å—Ç–∞–≤–∫–∞: {order_data['event_name']}\n"
        admin_msg += f"üÜî ID —Ä–∞—Å—á—ë—Ç–∞: {session_id[:8]}\n"
        admin_msg += "\nüì¶ <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"

        answers = session['answers']
        for state_key in sorted(answers.keys()):
            question_name_en = reverse_states.get(state_key, f"–í–æ–ø—Ä–æ—Å {state_key}")
            display_question_name = question_display_names.get(question_name_en,
                                                               question_name_en.replace('_', ' ').capitalize())
            answer_value = answers[state_key]

            if isinstance(answer_value, (int, float)):
                formatted_answer = f"{answer_value:,.0f}"
            else:
                formatted_answer = str(answer_value)

            admin_msg += f"üîπ {display_question_name}: {formatted_answer}\n"

        admin_msg += f"üí∞ <b>–û–ë–©–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:</b> {order_data['total']:,.0f} —Ä—É–±."

        for admin_id in admin_ids:
            try:
                bot.send_message(admin_id, admin_msg, parse_mode='HTML')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        bot.answer_callback_query(call.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        call.data = f"view_session_{session_id}"
        handle_view_user_session(call)

    except Exception as e:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_submit_from_history: {e}")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)